#!/bin/bash

################################################################################################
### sbatch configuration parameters must start with #SBATCH and must precede any other commands.
### To ignore, just add another # - like so: ##SBATCH
################################################################################################

#SBATCH --partition main			### specify partition name where to run a job. short: 7 days limit; gtx1080: 7 days; debug: 2 hours limit and 1 job at a time
#SBATCH --time 6-23:59:59			### limit the time of job running. Make sure it is not greater than the partition time limit!! Format: D-H:MM:SS
#SBATCH --job-name search			### name of the job
#SBATCH --output job-%J.out			### output log for running job - %J for job number
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4

# Note: the following 4 lines are commented out
#SBATCH --mail-user=user@post.bgu.ac.il	### user's email for sending job status messages
#SBATCH --mail-type=ALL			### conditions for sending the email. ALL,BEGIN,END,FAIL, REQUEU, NONE
#SBATCH --mem=10G				### ammount of RAM memory

### Print some data to output file ###
echo `date`
echo -e "\nSLURM_JOBID:\t\t" $SLURM_JOBID
echo -e "SLURM_JOB_NODELIST:\t" $SLURM_JOB_NODELIST "\n\n"

### Start your code below ####
module load anaconda				### load anaconda module (must be present when working with conda environments)
source activate my_env				### activate a conda environment, replace my_env with your conda environment

# Check if the required arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <tar_files_directory> <batch_size>"
    exit 1
fi

# Assign arguments to variables
tar_files_directory=$1
batch_size=$2

# List tar files in the specified directory
tar_files=("$tar_files_directory"/*.tar.gz)

# Check if there are any tar files in the directory
if [ ${#tar_files[@]} -eq 0 ]; then
    echo "No tar files found in the specified directory."
    exit 1
fi

# Iterate over tar files in batches
for ((i=0; i<${#tar_files[@]}; i+=batch_size)); do
    # Create a new directory for the current batch
    output_directory="batch_$((i / batch_size))_output"
    mkdir -p "$output_directory"
     # Create input directory within the batch-specific directory
    input_directory=""batch_$((i / batch_size))_input"
    mkdir -p "$input_directory"

    batch=("${tar_files[@]:i:batch_size}")
    for file in "${batch[@]}"; do
        mv "$file" "$input_directory"
    done
    sbatch cluster_run_single.example ${input_directory} ${output_directory}
done



